#!/usr/bin/env python3
# @Author  : Serafim Nenarokov (serafim.nenarokov@gmail.com)

import os
import argparse
import re
import json

from lib.utils import MUT_REPLACEMENT_RULES_PATH


def parse_arguments():
    usage = "report_new_suspicious_mutations.py"
    description = """
    Takes list of suspicious mutations from current datafreeze, compares this list to
    `mut_replacement_rules.json` and saves a file with new suspicious mutations.
    Mutations from this file should be resolved and put to `mut_replacement_rules.json` file.
    """
    description = re.sub(r"(?<=\w)\n(?=\w)", "\n", description)
    formatter = argparse.RawTextHelpFormatter

    parser = argparse.ArgumentParser(usage,
                                     description=description,
                                     formatter_class=formatter)

    parser.add_argument("-s", "--suspisious_list",
                        required=True,
                        help="List of all suspicious mutations (generated by 'find_suspicious_mutations.py', JSON format)")
    parser.add_argument("-r", "--rules_path",
                        help="Rules json file (optional)")
    parser.add_argument("-o", "--output_path",
                        required=True,
                        help="List of suspicious mutations that should be resolved (JSON format)")

    return parser.parse_args()


def main():
    arguments = parse_arguments()

    rules_path = arguments.rules_path

    if not rules_path:
        rules_path = MUT_REPLACEMENT_RULES_PATH

    with open(arguments.suspisious_list) as f:
        suspicious = json.load(f)

    with open(rules_path) as f:
        rules = json.load(f)
        rules = [e['predict'] for e in rules]

    unresolved = []

    for susp_mut in suspicious:
        if susp_mut['predict'] not in rules:
            unresolved.append(susp_mut)

    with open(arguments.output_path, 'w') as out_f:
        json.dump(unresolved, out_f, indent=4, sort_keys=False)

    if len(unresolved) == 0:
        print('All the suspicions satisfied')
    else:
        print(
            f'There are {len(unresolved)} unsatisfied suspicious patterns.')
        for mut_codes in unresolved:
            print(mut_codes['predict'])


if __name__ == '__main__':
    main()
